/*
 * ESign API documentation V1
 * ESign application.
 *
 * OpenAPI spec version: 1
 * Contact: ext-ellouzi@em-lyon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Demande Signature Create Request.
 */
public class SwagSignatureCreateRequest implements Swagger.MappedProperties {
    /**
     * Un identifiant fourni par l’application appelante.
     * @return transacIdApplicationSource
     */
    public String transacIdApplicationSource { get; set; }

    /**
     * Le trigramme ou quadrigramme (à définir) de l’application appelante.
     * @return transacCodeApplicationSource
     */
    public String transacCodeApplicationSource { get; set; }

    /**
     * Nom du demandeur de la signature électronique (peut être un utilisateur générique).
     * @return transacDemandeurApplicationSource
     */
    public String transacDemandeurApplicationSource { get; set; }

    /**
     * Code du prestataire de signature à utiliser (1 pour le MVP).
     * @return transacCodePrestataireSignature
     */
    public Integer transacCodePrestataireSignature { get; set; }

    /**
     * L’URL au travers de laquelle eSgin préviendra l’application appelante de la mise à disposition du document final.
     * @return transacUrlWebHookApplicationSource
     */
    public String transacUrlWebHookApplicationSource { get; set; }

    /**
     * L’URL au travers de laquelle eSgin préviendra l’application appelante de l\'échec ou la réussite de la relance.
     * @return transacUrlWebHookRelanceApplicationSource
     */
    public String transacUrlWebHookRelanceApplicationSource { get; set; }

    /**
     * Nom du profil de signature à utiliser.
     * @return profile
     */
    public String profile { get; set; }

    /**
     * Signature Request Type.
     */
    public enum RTypeEnum {
        SIMPLE,
        CERTIFICATSERVEUR,
        CERTIFICATSERVEURAVECOPTION,
        MIXTE,
        MIXTEAVECOPTION,
        MIXTEALAFIN,
        MIXTEALAFINAVECOPTION
    }

    /**
     * Signature Request Type.
     * @return r_type
     */
    //public RTypeEnum r_type { get; set; }
    public RTypeEnum type { get; set; }

    /**
     * Liste des signataires du ou des documents .
     * @return signers
     */
    public List<SwagSignatureSignerModel> signers { get; set; }

    /**
     * Liste du ou des documents à signer.
     * @return documents
     */
    public List<SwagSignatureDocumentModel> documents { get; set; }

    /**
     * Si défini sur True, le premier signataire recevra une invitation à signer le (s) document (s) par courrier électronique dès que le la transaction sera démarrée.\r\nFalse par défaut.
     * @return mustContactFirstSigner
     */
    public Boolean mustContactFirstSigner { get; set; }

    /**
     * Indique si chaque signataire doit recevoir le document signé par e-mail lorsque la transaction est terminée.\r\nFalse par défaut.
     * @return finalDocSent
     */
    public Boolean finalDocSent { get; set; }

    /**
     * Indique si le demandeur doit recevoir le document signé par e-mail lorsque la transaction est terminée.\r\nFalse par défaut.
     * @return finalDocRequesterSent
     */
    public Boolean finalDocRequesterSent { get; set; }

    /**
     * Indique si les observateurs doivent recevoir le document signé par e-mail lorsque la transaction est terminée. Il prend la valeur de finalDocSent par défaut.
     * @return finalDocObserverSent
     */
    public Boolean finalDocObserverSent { get; set; }

    /**
     * Description ou titre pour la signature.
     * @return description
     */
    public String description { get; set; }

    /**
     * Cette option est utilisée pour indiquer quel sera le type de certificat utilisé pour effectuer la signature et donc quel type de signature sera effectuée.\r\nLes valeurs disponibles sont :\r\n        Certified : Permet aux signataires d\'effectuer une signature certifiée.\r\n        Advanced Permet aux signataires d\'effectuer des tâches avancées signature qui nécessite les mêmes options que une signature certifiée.\r\n        Simple : Permet aux signataires d\'effectuer une signature simple.\r\n        La valeur par défaut
     */
    public enum CertificateTypeEnum {
        CERTIFIED,
        ADVANCED,
        SIMPLE
    }

    /**
     * Cette option est utilisée pour indiquer quel sera le type de certificat utilisé pour effectuer la signature et donc quel type de signature sera effectuée.\r\nLes valeurs disponibles sont :\r\n        Certified : Permet aux signataires d\'effectuer une signature certifiée.\r\n        Advanced Permet aux signataires d\'effectuer des tâches avancées signature qui nécessite les mêmes options que une signature certifiée.\r\n        Simple : Permet aux signataires d\'effectuer une signature simple.\r\n        La valeur par défaut
     * @return certificateType
     */
    public CertificateTypeEnum certificateType { get; set; }

    /**
     * La langue de la transaction, les valeurs possibles sont :\r\n    bg pour Bulgarian\r\n    ca pour Catalan\r\n    de pour German\r\n    en pour English(default value)\r\n    es pour Spanish\r\n    fr pour French\r\n    it pour Italian\r\n    nl pour Dutch\r\n    pl pour Polish\r\n    pt pour Portuguese\r\n    ro pour Romanian
     */
    public enum LanguageEnum {
        CA,
        DE,
        EN,
        ES,
        FR,
        IT,
        NL,
        PL,
        PT,
        RO
    }

    /**
     * La langue de la transaction, les valeurs possibles sont :\r\n    bg pour Bulgarian\r\n    ca pour Catalan\r\n    de pour German\r\n    en pour English(default value)\r\n    es pour Spanish\r\n    fr pour French\r\n    it pour Italian\r\n    nl pour Dutch\r\n    pl pour Polish\r\n    pt pour Portuguese\r\n    ro pour Romanian
     * @return language
     */
    public LanguageEnum language { get; set; }

    /**
     * Le mode pour activer la signature numérique manuscrite. \r\n Il y a trois modes :\r\n    - "0" : désactive la signature manuscrite\r\n    - "1" : active la signature manuscrite\r\n    - "2" : active la signature manuscrite si seulement c\'est une interface tactile.
     */
    public enum HandwrittenSignatureModeEnum {
        DESACTIVESIGNATUREMANUSCRITE,
        ACTIVESIGNATUREMANUSCRITE,
        ACTIVESIGNATUREMANUSCRITESEULEMENTINTERFACETACTILE
    }

    /**
     * Le mode pour activer la signature numérique manuscrite. \r\n Il y a trois modes :\r\n    - "0" : désactive la signature manuscrite\r\n    - "1" : active la signature manuscrite\r\n    - "2" : active la signature manuscrite si seulement c\'est une interface tactile.
     * @return handwrittenSignatureMode
     */
    public HandwrittenSignatureModeEnum handwrittenSignatureMode { get; set; }

    /**
     * Cette option indique comment les signataires sont chaînés pendant le processus de signature. \r\nLes valeurs valides sont :\r\n    aucun : Aucun email d\'invitation n\'est envoyé dans ce mode.Chaque le signataire est redirigé vers l’url successURL après signature.Il appartient au demandeur de contacter chacun des signataires.\r\n    email : La valeur par défaut. Les signataires reçoivent le email d\'invitation (sauf le premier, voir mustContactFirstSigner) et sont redirigés vers l’url successURL.\r\n    web : Active le mode de signature lié. Dans ce mode, tous les signataires sont physiquement au même endroit. Après la signature du signataire, il sera redirigé vers la page de signature du prochain signataire au lieu d\'être retourné à la vers l’url successURL et les prochains signataires ne recevront pas d’email d\'invitation. Le dernier signataire sera redirigé vers le successURL.
     */
    public enum ChainingModeEnum {
        AUCUN,
        EMAIL,
        WEB
    }

    /**
     * Cette option indique comment les signataires sont chaînés pendant le processus de signature. \r\nLes valeurs valides sont :\r\n    aucun : Aucun email d\'invitation n\'est envoyé dans ce mode.Chaque le signataire est redirigé vers l’url successURL après signature.Il appartient au demandeur de contacter chacun des signataires.\r\n    email : La valeur par défaut. Les signataires reçoivent le email d\'invitation (sauf le premier, voir mustContactFirstSigner) et sont redirigés vers l’url successURL.\r\n    web : Active le mode de signature lié. Dans ce mode, tous les signataires sont physiquement au même endroit. Après la signature du signataire, il sera redirigé vers la page de signature du prochain signataire au lieu d\'être retourné à la vers l’url successURL et les prochains signataires ne recevront pas d’email d\'invitation. Le dernier signataire sera redirigé vers le successURL.
     * @return chainingMode
     */
    public ChainingModeEnum chainingMode { get; set; }

    /**
     * Cette option permet d’envoyer une copie du document final signé\r\nà une liste d\'adresses e-mail. Cette copie est\r\nenvoyer par email en tant que cc pour chaque document final signé par un signataire.\r\nPour que cette option soit prise en compte, l\'option finalDocSent doit être envoyée à True.
     * @return finalDocCCeMails
     */
    public List<String> finalDocCCeMails { get; set; }

    /**
     * Cette option permet l’enregistrement des signataires via les deux\r\nétapes du processus d\'inscription. Lorsqu\'elle est activée, RegistrationRequest devient obligatoire pour chacun des\r\nTransactionSigners non inscrit, le type de certificat\r\ndoit être réglé sur advanced, le N° de téléphone honeNumber et la date de naissance doivent être définis.\r\nLa valeur par défaut est False.
     * @return twoStepsRegistration
     */
    public List<String> twoStepsRegistration { get; set; }

    /**
     * NbJoursAvantRelance
     * @return nbJoursAvantRelance
     */
    public Integer nbJoursAvantRelance { get; set; }

    /**
     * NbMaxRelance
     * @return nbMaxRelance
     */
    public Integer nbMaxRelance { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'TransacIdApplicationSource' => 'transacIdApplicationSource',
        'TransacCodeApplicationSource' => 'transacCodeApplicationSource',
        'TransacDemandeurApplicationSource' => 'transacDemandeurApplicationSource',
        'TransacCodePrestataireSignature' => 'transacCodePrestataireSignature',
        'TransacUrlWebHookApplicationSource' => 'transacUrlWebHookApplicationSource',
        'TransacUrlWebHookRelanceApplicationSource' => 'transacUrlWebHookRelanceApplicationSource',
        'Profile' => 'profile',
        'Type' => 'type', // 'r_type',
        'Signers' => 'signers',
        'Documents' => 'documents',
        'MustContactFirstSigner' => 'mustContactFirstSigner',
        'FinalDocSent' => 'finalDocSent',
        'FinalDocRequesterSent' => 'finalDocRequesterSent',
        'FinalDocObserverSent' => 'finalDocObserverSent',
        'Description' => 'description',
        'CertificateType' => 'certificateType',
        'Language' => 'language',
        'HandwrittenSignatureMode' => 'handwrittenSignatureMode',
        'ChainingMode' => 'chainingMode',
        'FinalDocCCeMails' => 'finalDocCCeMails',
        'TwoStepsRegistration' => 'twoStepsRegistration',
        'NbJoursAvantRelance' => 'nbJoursAvantRelance',
        'NbMaxRelance' => 'nbMaxRelance'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public SwagSignatureCreateRequest() {
        signers = new List<SwagSignatureSignerModel>();
        documents = new List<SwagSignatureDocumentModel>();
        finalDocCCeMails = new List<String>();
        twoStepsRegistration = new List<String>();
    }

    public static SwagSignatureCreateRequest getExample() {
        SwagSignatureCreateRequest signatureCreateRequest = new SwagSignatureCreateRequest();
        signatureCreateRequest.transacIdApplicationSource = 'aeiou';
        signatureCreateRequest.transacCodeApplicationSource = 'aeiou';
        signatureCreateRequest.transacDemandeurApplicationSource = 'aeiou';
        signatureCreateRequest.transacCodePrestataireSignature = 123;
        signatureCreateRequest.transacUrlWebHookApplicationSource = 'aeiou';
        signatureCreateRequest.transacUrlWebHookRelanceApplicationSource = 'aeiou';
        signatureCreateRequest.profile = 'aeiou';
        signatureCreateRequest.type = RTypeEnum.SIMPLE;
        signatureCreateRequest.signers = new List<SwagSignatureSignerModel>{SwagSignatureSignerModel.getExample()};
        signatureCreateRequest.documents = new List<SwagSignatureDocumentModel>{SwagSignatureDocumentModel.getExample()};
        signatureCreateRequest.mustContactFirstSigner = true;
        signatureCreateRequest.finalDocSent = true;
        signatureCreateRequest.finalDocRequesterSent = true;
        signatureCreateRequest.finalDocObserverSent = true;
        signatureCreateRequest.description = 'aeiou';
        signatureCreateRequest.certificateType = CertificateTypeEnum.CERTIFIED;
        signatureCreateRequest.language = LanguageEnum.CA;
        signatureCreateRequest.handwrittenSignatureMode = HandwrittenSignatureModeEnum.DESACTIVESIGNATUREMANUSCRITE;
        signatureCreateRequest.chainingMode = ChainingModeEnum.AUCUN;
        signatureCreateRequest.finalDocCCeMails = new List<String>{'aeiou'};
        signatureCreateRequest.twoStepsRegistration = new List<String>{'aeiou'};
        signatureCreateRequest.nbJoursAvantRelance = 123;
        signatureCreateRequest.nbMaxRelance = 123;
        return signatureCreateRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagSignatureCreateRequest) {
            SwagSignatureCreateRequest signatureCreateRequest = (SwagSignatureCreateRequest) obj;
            return this.transacIdApplicationSource == signatureCreateRequest.transacIdApplicationSource
                && this.transacCodeApplicationSource == signatureCreateRequest.transacCodeApplicationSource
                && this.transacDemandeurApplicationSource == signatureCreateRequest.transacDemandeurApplicationSource
                && this.transacCodePrestataireSignature == signatureCreateRequest.transacCodePrestataireSignature
                && this.transacUrlWebHookApplicationSource == signatureCreateRequest.transacUrlWebHookApplicationSource
                && this.transacUrlWebHookRelanceApplicationSource == signatureCreateRequest.transacUrlWebHookRelanceApplicationSource
                && this.profile == signatureCreateRequest.profile
                && this.type == signatureCreateRequest.type
                && this.signers == signatureCreateRequest.signers
                && this.documents == signatureCreateRequest.documents
                && this.mustContactFirstSigner == signatureCreateRequest.mustContactFirstSigner
                && this.finalDocSent == signatureCreateRequest.finalDocSent
                && this.finalDocRequesterSent == signatureCreateRequest.finalDocRequesterSent
                && this.finalDocObserverSent == signatureCreateRequest.finalDocObserverSent
                && this.description == signatureCreateRequest.description
                && this.certificateType == signatureCreateRequest.certificateType
                && this.language == signatureCreateRequest.language
                && this.handwrittenSignatureMode == signatureCreateRequest.handwrittenSignatureMode
                && this.chainingMode == signatureCreateRequest.chainingMode
                && this.finalDocCCeMails == signatureCreateRequest.finalDocCCeMails
                && this.twoStepsRegistration == signatureCreateRequest.twoStepsRegistration
                && this.nbJoursAvantRelance == signatureCreateRequest.nbJoursAvantRelance
                && this.nbMaxRelance == signatureCreateRequest.nbMaxRelance;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (transacIdApplicationSource == null ? 0 : System.hashCode(transacIdApplicationSource));
        hashCode = (17 * hashCode) + (transacCodeApplicationSource == null ? 0 : System.hashCode(transacCodeApplicationSource));
        hashCode = (17 * hashCode) + (transacDemandeurApplicationSource == null ? 0 : System.hashCode(transacDemandeurApplicationSource));
        hashCode = (17 * hashCode) + (transacCodePrestataireSignature == null ? 0 : System.hashCode(transacCodePrestataireSignature));
        hashCode = (17 * hashCode) + (transacUrlWebHookApplicationSource == null ? 0 : System.hashCode(transacUrlWebHookApplicationSource));
        hashCode = (17 * hashCode) + (transacUrlWebHookRelanceApplicationSource == null ? 0 : System.hashCode(transacUrlWebHookRelanceApplicationSource));
        hashCode = (17 * hashCode) + (profile == null ? 0 : System.hashCode(profile));
        hashCode = (17 * hashCode) + (type == null ? 0 : System.hashCode(type));
        hashCode = (17 * hashCode) + (signers == null ? 0 : System.hashCode(signers));
        hashCode = (17 * hashCode) + (documents == null ? 0 : System.hashCode(documents));
        hashCode = (17 * hashCode) + (mustContactFirstSigner == null ? 0 : System.hashCode(mustContactFirstSigner));
        hashCode = (17 * hashCode) + (finalDocSent == null ? 0 : System.hashCode(finalDocSent));
        hashCode = (17 * hashCode) + (finalDocRequesterSent == null ? 0 : System.hashCode(finalDocRequesterSent));
        hashCode = (17 * hashCode) + (finalDocObserverSent == null ? 0 : System.hashCode(finalDocObserverSent));
        hashCode = (17 * hashCode) + (description == null ? 0 : System.hashCode(description));
        hashCode = (17 * hashCode) + (certificateType == null ? 0 : System.hashCode(certificateType));
        hashCode = (17 * hashCode) + (language == null ? 0 : System.hashCode(language));
        hashCode = (17 * hashCode) + (handwrittenSignatureMode == null ? 0 : System.hashCode(handwrittenSignatureMode));
        hashCode = (17 * hashCode) + (chainingMode == null ? 0 : System.hashCode(chainingMode));
        hashCode = (17 * hashCode) + (finalDocCCeMails == null ? 0 : System.hashCode(finalDocCCeMails));
        hashCode = (17 * hashCode) + (twoStepsRegistration == null ? 0 : System.hashCode(twoStepsRegistration));
        hashCode = (17 * hashCode) + (nbJoursAvantRelance == null ? 0 : System.hashCode(nbJoursAvantRelance));
        hashCode = (17 * hashCode) + (nbMaxRelance == null ? 0 : System.hashCode(nbMaxRelance));
        return hashCode;
    }
}